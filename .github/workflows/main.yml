# 工作流名称
name: Electron Release Build

# 触发条件：当创建新的 Release 时触发
on:
  release:
    types: [created] # 只在创建 Release 时运行

# 定义一个构建和发布 Job
jobs:
  build-and-release:
    # 使用矩阵策略在不同的操作系统上运行，以生成对应平台的安装包
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest] # 选择需要构建的操作系统

    # 指定 Job 运行在哪个操作系统上，这里使用了矩阵变量
    runs-on: ${{ matrix.os }}

    steps:
      # Step 1: 检出代码
      # actions/checkout@v4 会自动检出触发 Release 事件的那个 Tag 的代码
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: 设置 Node.js 环境
      # 根据你的项目需求选择合适的 Node.js 版本
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20 # 或你项目使用的 Node.js 版本，例如 '18'

      # Step 3: 缓存 Node.js 依赖，加快构建速度
      # 注意：这个缓存会同时尝试覆盖主项目和子项目的依赖缓存
      # 如果使用 yarn，需要修改 path 和 key
      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          # 假设使用 npm
          path: ~/.npm
          # key 会根据所有找到的 package-lock.json (包括子目录) 的哈希值生成
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
          # 如果使用 yarn (请取消注释并修改上面npm相关的部分)
          # path: ~/.cache/yarn
          # key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          # restore-keys: |
          #   ${{ runner.os }}-yarn-

      # Step 4: 安装主项目依赖 (使用 npm install)
      - name: Install root dependencies
        run: npm install # 或 npm i

      # Step 5: 进入 frontend 目录安装其依赖 (使用 npm install)
      - name: Install frontend dependencies
        run: npm install # 或 npm i
        working-directory: frontend # 指定在 frontend 目录下执行命令

      # Step 6: 执行针对不同操作系统的 Electron 打包命令
      # 使用 Shell 的 case 语句根据 RUNNER_OS 环境变量执行不同的命令
      - name: Build Electron App for ${{ runner.os }}
        run: |
          # GitHub Actions 会设置 RUNNER_OS 环境变量，值为 "Linux", "Windows", 或 "macOS"
          case "$RUNNER_OS" in
            "Windows")
              echo "Running Windows build command: npm run build-w"
              npm run build-w
              ;;
            "macOS")
              echo "Running macOS build command: npm run build-m-arm64"
              npm run build-m-arm64
              ;;
            "Linux")
              echo "Running Linux build command: npm run build-l"
              npm run build-l
              ;;
            *)
              # 处理意料之外的操作系统，虽然矩阵已经限制了
              echo "Unsupported OS: $RUNNER_OS"
              exit 1 # 使该 Job 失败
              ;;
          esac

      # Step 7: 上传打包好的文件到 Release Assets
      # softprops/action-gh-release 是一个非常方便的 Action，用于管理 GitHub Release
      # 它能够找到当前触发的 Release，并将指定的文件作为 Assets 上传
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        # 这个 if 条件是冗余的，因为 release trigger 已经保证了，但保留也无害
        if: startsWith(github.ref, 'refs/tags/')
        with:
          # files: 指定需要上传的文件，这里使用了通配符，上传 dist 目录下的所有文件
          # 确保你的 build-w, build-m-arm64, build-l 脚本都会将生成的安装包输出到 dist 目录
          files: |
            out/*
        env:
          # GITHUB_TOKEN 是 GitHub 自动提供的 Secret，拥有对当前仓库进行操作的权限
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
